unit HashingAberto;

interface

uses
  Vcl.Dialogs;

type
  THashTable = class
  public type
    // Dados de um computador
    PComputador = ^TComputador;
    TComputador = record
      Codigo: Integer;
      IP: string;
      Descricao: string;
      Setor: string;

      Apontador: PComputador;
    end;

  strict private
    const LEN_VET = 17;

  strict private
    HashTable: array [0..LEN_VET] of TComputador;

    // Função hash que retona um índice no
    // vetor com base na chave.
    function Hashing( const ACodigo: Integer ): Integer;
    function Default(): TComputador;

  public
    procedure Adicionar( const AComputador: TComputador );
    function Pesquisar( const ACodigo: Integer ): TComputador;

    procedure ImprimirComputadores();
  end;


implementation

uses
  System.SysUtils;

{ THashTable }

procedure THashTable.Adicionar(const AComputador: TComputador);
var
  IndiceHash: Integer;
  PAuxiliar: PComputador;
begin
  // Cálculo do hash
  IndiceHash:= Hashing( AComputador.Codigo );

  if ( HashTable[ IndiceHash ].Codigo > 0 ) then
  begin

    // Encontra o próximo ponteiro disponível para inserir no registro
    PAuxiliar:= HashTable[ IndiceHash ].Apontador;
    while ( PAuxiliar <> nil ) do
    begin

      // Verifica se o cadastro não foi realizado
      if ( PAuxiliar.Codigo = AComputador.Codigo ) then
        raise Exception.Create('Código não foi cadastrado');

      PAuxiliar:= PAuxiliar.Apontador;
    end;

    New(PAuxiliar);

    PAuxiliar.Codigo:= AComputador.Codigo;
    PAuxiliar.IP:= AComputador.IP;
    PAuxiliar.Descricao:= AComputador.Descricao;
    PAuxiliar.Setor:= AComputador.Setor;
    PAuxiliar.Apontador:= nil;

  end else
    HashTable[IndiceHash]:= AComputador;

end;

function THashTable.Default: TComputador;
begin
  Result.Codigo:= 0;
  Result.Descricao:= EmptyStr;
  Result.IP:= EmptyStr;
  Result.Setor:= EmptyStr;

  Result.Apontador:= nil;
end;

function THashTable.Hashing(const ACodigo: Integer): Integer;
begin
  Result:=
    ( ACodigo mod LEN_VET );
end;

procedure THashTable.ImprimirComputadores;
var
  Indice: Integer;
begin

  for Indice := Low(HashTable) to High(HashTable) do
  begin
    ShowMessage( HashTable[Indice].Descricao );
  end;
end;

function THashTable.Pesquisar(const ACodigo: Integer): TComputador;
var
  IndiceHash: Integer;

  PAuxiliar: PComputador;
begin
  Result:= Default;

  // Cálculo do hash
  IndiceHash:= Hashing( ACodigo );

  if ( HashTable[ IndiceHash ].Codigo <= 0 ) then
  begin

    if ( HashTable[ IndiceHash ].Codigo = ACodigo ) then
      Exit( HashTable[ IndiceHash ] )
    else begin

      // Encontra o próximo ponteiro disponível para inserir no registro
      PAuxiliar:= HashTable[ IndiceHash ].Apontador;
      while ( PAuxiliar <> nil ) do
      begin

        // Verifica se o cadastro não foi realizado
        if ( PAuxiliar.Codigo = ACodigo ) then
        begin

          Result.Codigo:= PAuxiliar.Codigo;
          Result.IP:= PAuxiliar.IP;
          Result.Descricao:= PAuxiliar.Descricao;
          Result.Setor:= PAuxiliar.Setor;

          Exit();
        end;

        PAuxiliar:= PAuxiliar.Apontador;
      end;

    end;
  end;

end;

end.
